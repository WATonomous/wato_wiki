import type { WATcloudStaticImage } from "@/build/fixtures/images";
import { getImageBlurSvg } from "@/lib/image-blur-svg";

/**
 * Renders an image component with multiple sources and an alt text.
 * This is useful for serving images in multiple formats. For example,
 * you can serve an image in AVIF, WebP, and PNG formats and the browser
 * will choose the best format to use.
 * @param srcs - An array of image source URLs.
 * @param alt - The alternative text for the image.
 * @returns The rendered Picture component.
 */
export default function Picture({
  image,
  alt,
  style = {},
}: {
  image: WATcloudStaticImage;
  alt: string;
  style?: React.CSSProperties;
}) {
  // The blur logic is derived from https://github.com/vercel/next.js/blob/98be3ba23ea65ac5b581999d79a1093f147b46f0/packages/next/src/shared/lib/get-img-props.ts#L626
  
  // blurDataURL is a base64-encoded string generated by the nextjs image loader
  // This is only generated during production builds, so in development, we might see
  // no placeholders.
  const blurDataURL = image.jpg.blurDataURL || "";

  const backgroundImage = `url("data:image/svg+xml;charset=utf-8,${getImageBlurSvg(
    {
      widthInt: image.jpg.width,
      heightInt: image.jpg.height,
      blurWidth: image.jpg.blurWidth,
      blurHeight: image.jpg.blurHeight,
      blurDataURL,
    }
  )}")`;

  const placeholderStyle = {
    backgroundSize: "cover",
    backgroundPosition: "50% 50%",
    backgroundRepeat: "no-repeat",
    backgroundImage,
  };

  return (
    <picture>
      <source srcSet={image.avif.src} type="image/avif" />
      <source srcSet={image.webp.src} type="image/webp" />
      <img
        src={image.jpg.src}
        alt={alt}
        width={image.avif.width}
        height={image.avif.height}
        decoding="async"
        loading="lazy"
        style={{...style, ...placeholderStyle}}
      />
    </picture>
  );
}
