#!/bin/bash

# This script is used to generate fixtures (data) for the website.
# There are 2 ways to generate fixtures:
# 1. generate using the `data` branch (requires an internal monorepo).
# 2. download fixtures from production.
# If the `FETCH_FIXTURES_FROM` environment variable or the --fetch-from
# arg is specified, then fixtures will be downloaded instead of generated
# from the `data` branch.

set -o errexit -o nounset -o pipefail

to_pascale_case() {
    echo "$1" | sed -E 's/(^|_|-)([a-z])/\U\2/g'
}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo "Processing images..."
# Convert AVIF images to WebP and JPEG for browsers that don't support AVIF
"$PROJECT_DIR"/node_modules/.bin/sharp --format webp --input "$PROJECT_DIR"'/public/assets/*.avif' --output "$PROJECT_DIR"'/public/assets/{name}.generated.webp'
"$PROJECT_DIR"/node_modules/.bin/sharp --format jpg --input "$PROJECT_DIR"'/public/assets/*.avif' --output "$PROJECT_DIR"'/public/assets/{name}.generated.jpg'
# Generate typescript file to facilitate importing images
cat <<EOF > "$PROJECT_DIR"/build/fixtures/images.ts
// This file is automatically generated. Please do not edit.
import { StaticImageData } from "next/image"

export type WATcloudStaticImage = {
    avif: StaticImageData,
    webp: StaticImageData,
    jpg: StaticImageData,
}
EOF
for image in "$PROJECT_DIR"/public/assets/*.avif; do
    name=$(basename "$image" .avif)
    jsname=$(to_pascale_case "$name")
    # echo "export const $name = require('./$name.generated.webp');" >> "$PROJECT_DIR"/public/assets/images.generated.ts
    cat <<EOF >> "$PROJECT_DIR"/build/fixtures/images.ts
        import ${jsname}Avif from '@/public/assets/${name}.avif';
        import ${jsname}Webp from '@/public/assets/${name}.generated.webp';
        import ${jsname}Jpg from '@/public/assets/${name}.generated.jpg';

        export const ${jsname}: WATcloudStaticImage = {
            avif: ${jsname}Avif,
            webp: ${jsname}Webp,
            jpg: ${jsname}Jpg,
        };
EOF
done

