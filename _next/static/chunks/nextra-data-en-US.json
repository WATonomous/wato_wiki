{"/about":{"title":"About WATonomous","data":{"":"WATonomous is the autonomous vehicle design team at the University of Waterloo. We are an agile group of developers, engineers, businessmen, and marketers looking to lead the next generation of robotic systems and their applications to society.","our-big-audacious-goal#Our Big Audacious Goal":"Members of WATonomous center around a singular goal:\nTo show the world a bunch of students can build a self-driving car!\n... and in doing so, drive ourselves to become better people :)."}},"/finance":{"title":"Finance System","data":{"":"Instructions on how to use the WATonomous Finance System, which is used to track funding, our account balances, and manage and reimburse purhcases.Creating and Submitting a Personal Purchase Request Contains details for members on how to purchase items using their own money and get reimbursed for it. (go-to)Creating and Submitting a Purchase Request Contains details for members on how to purchase items using WATonomous cash or directly from one of our funds. (go-to)"}},"/finance/creating_personal_purchases":{"title":"Creating Personal Purchases","data":{"":"Go to https://finance-frontend.watonomous.ca/\nCreate New Ticket > Ticket Type: Personal Purchase\nEnter all purchase details. For funding item link, you would either be using FI-1 (WATO Cash) or one of the Funding Items that match the category. For example, if you're purchasing an RTX 4090 it would probably fit under GPU funding.\nAwait team approval. Please reach out to the finance team and the faculty advisor.\nOnce this has been completed, the item will be sent to the finance coordinator. They will purchase the item, in which case the status will be ORDERED\nOnce the item has arrived, the item will be transitioned to READY_FOR_PICKUP, and the pick up instructions will give you next steps\nOnce completed, the item should be in the PICKED_UP state, completing the flow."}},"/finance/creating_purchase_requests":{"title":"Creating Purchase Requests","data":{"":"Go to https://finance-frontend.watonomous.ca/\nCreate New Ticket > Ticket Type: UW Finance Purchase\nEnter all purchase details. For funding item link, you would either be using FI-1 (WATO Cash) or one of the Funding Items that match the category. For example, if you're purchasing an RTX 4090 it would probably fit under GPU funding.\nAwait team approval. Please reach out to the finance team and the faculty advisor.\nOnce this has been completed, the status will transition to READY_FOR_BUY. You should purchase the item at this step.\nOnce the item has been purchased, please upload the receipt, as well as a University of Waterloo Finance reimbursement form. Instructions found below.\nClick Confirm Item(s) Purchased and Submit Reimbursement","creating-a-university-of-waterloo-finance-reimbursement-form#Creating a University of Waterloo Finance reimbursement form.":"Navigate here\nClick the link in step 1 titled \"reimbursement form (excel)\"\nEnter the following fields\nPayee is Student\nClaimant Name, Student Number, Department, Phone Number, E-mail Address\nMailing Address, City, Province/State, Postal Code. For these, use the address your items were shipped to, or your personal address.\nDestination/Reason for Request: Please put the corresponding reference number. For WEEF, this can be found here. Reach out to @smileycow on Discord if you do not know what this is\nIgnore the Travel Advance Request section, and fill in your item details on the next section. For the description, please put the name of your item, and if available, the reason it was purchased.\nHas an advance been issued: No\nEnter your signature of Claimant:\nDone!"}},"/":{"title":"Welcome to the Wiki","data":{"":"Welcome to the WATonomous Wiki! This is an open-source wiki for all things WATonomous.","new-here#New Here?":"","how-to-edit#How to Edit":"Editing the WATonomous wiki is easy. Simply click Edit this page on the far right of each page. Note, you must be part of the WATonomous Organization to be able to edit.You can use regular react components, or choose from a plethora of pre-built components and tools here."}},"/onboarding":{"title":"Onboarding","data":{"":"WATonomous onboarding guides. The following are quick jists of what each onboarding guide is for:ASD - Developing with WATcloud Contains setup steps for getting access to WATcloud as well as how to use WATcloud in the Autonomous Software Division. (go-to)ASD - General Onboarding Contains a walk-through that teaches you the basics of ROS2, Docker, Docker Compose, and the rest of our robotics software stack. (go-to)"}},"/onboarding/asd_general_onboarding":{"title":"General Autonomous Software Onboarding","data":{"":"You must complete ASD - Developing with WATcloud before proceeding with this guide."}},"/onboarding/asd_watcloud_dev":{"title":"Developing with WATcloud","data":{"":"You must complete your Cluster Access Form before proceeding with this guide.\nHere, we discuss setting up WATcloud to be used for software development in the Autonomous Software Division.","why-watcloud#Why WATcloud":"Due to the high computational requirements of many aspects of the ASD stack, WATO has a large server infrastructure for remote development WATcloud. In this section, you will learn to connect to WATcloud on VS code. Connecting to a server to do remote development is not only a crucial aspect of software development at WATonomous, but is also a very common practice in the industry.\nFun Fact: WATcloud closely mimics server infrastructures used by OpenAI, NASA, Nvidia, and more!","a-look-from-afar#A Look from Afar":"","how-does-watcloud-share-compute-resources-fairly#How does WATcloud share compute resources fairly?":"WATcloud relies heavily on a resource management tool known as SLURM. SLURM ensures that all resources in WATcloud are shared in a fair and well-managed manner.For the everyday developer, you can imagine SLURM as a \"build your own computer\" tool. You specify to SLURM what compute resources you want (CPU, RAM, GPU, memory, time limit, etc.) and SLURM will build a compute node with the resources it has on hand.","so-how-does-remote-development-actually-work#So how does remote development actually work?":"Remote development for a WATonomous member typically consists of a local machine, host machine, SLURM node, and a docker container. They are defined below:\nLocal Machine Your personal computer.\nHost Machine The computer you connect to. In the case of WATcloud, this is the SLURM login node.\nSLURM Node An \"imaginary computer\" that is created by WATcloud. You specify to WATcloud what compute you need by running commands in the SLURM login node.\nDocker Container An isolated coding environment.\nTo do remote development in the Autonomous Software Division, the process can be summed up by the image below:\nAs shown in the image, there are two ways to use a SLURM node.","job-scheduling-vs-interactive-development#Job Scheduling vs Interactive Development":"Use job scheduling when you want to run a command for a very long time (>1 day long). Use interactive development when you are actively making changes to your code and testing it.For most WATonomous members, you would use job scheduling for tasks like training neural networks, large data processing, numerical optimization, etc. On the other hand, you would use interactive development when you are coding/testing ROS2 nodes, interacting with / visualizing live data, making code changes in general, etc.","setting-up-watcloud-for-asd#Setting up WATcloud for ASD":"This section is experimental. Please let us know of any issues on our Discord\nDealing with SSH can be quite foreign to alot of new developers. Thankfully, we provide a series of helper scripts that will make setup for WATcloud easier on you.","general-setup#General Setup":"","local-machine-clone-the-wato_asd_tooling-repository#[Local Machine] Clone the wato_asd_tooling repository":"git clone git@github.com:WATonomous/wato_asd_tooling.git","local-machine-generate-an-ssh-config#[Local Machine] Generate an SSH config":"If you have never created an ~/.ssh/config file before, do that now. Note, we assume that all your SSH files are stored under ~/.ssh\ntouch ~/.ssh/config\nGenerate a WATcloud SSH config. Follow the prompts whenever you get them.\ncd wato_asd_tooling\nbash ssh_helpers/generate_ssh_config.sh\nYou should now be able to connect our cluster using these commands:\nssh tr-ubuntu3\nssh derek3-ubuntu2\nssh delta-ubuntu2","local-machine-setup-vscode-for-ssh#[Local Machine] Setup VScode for SSH":"To do this, download the Remote - SSH VScode Extension. After that, you should be able to attach VScode to any of the machines.","local-machine-setup-agent-forwarding#[Local Machine] Setup Agent Forwarding":"Agent forwarding lets us carry our identity onto other machines that we connect to. What this means is, you can use git commands on other machines without having to create an SSH key on each machine you connect to.Setup agent forwarding with our helper script. Follow the prompts whenever you get them.\ncd wato_asd_tooling\nbash ssh_helpers/configure_agent_forwarding.sh","host-machine-confirm-agent-forwarding-works#[Host Machine] Confirm Agent Forwarding Works":"You should now be able to use git on all the WATcloud machines you connect to. Confirm by running the following inside a WATcloud machine you connected to.\nssh -T git@github.com\nDeliverable Get SSH and SSH Agent Forwarding working.","setup-for-job-scheduling#Setup for Job Scheduling":"There is no setup. Creating an SLURM job is really easy. It was what SLURM was designed for. You can view docs on SLURM in the WATcloud documentation.\nDeliverable Run a SLURM batch job with 2 CPUs that counts to 60.\nIf you want to create a slurm job that runs inside a docker container, you can use the following helper script.\ncd wato_asd_tooling\nbash slurm_templates/custom_job_node.sh\nYou need to have access to our docker registry to make this work. You can come back to this when you've learned about docker in the General Onboarding","setup-for-interactive-development#Setup for Interactive Development":"Unlike job scheduling, SLURM was not built to handle interactive development. Luckily we have a team of very talented individuals, and we managed to make interactive development work nonetheless :).Creating an interactive development environment entails starting an SSH server inside the SLURM node, some wacky SSH key sharing, a netcast proxycommand, as well as pointing docker to a persistent filesystem. You don't have to do that though. You just need to do the following.","ssh-into-a-slurm-login-node#SSH into a SLURM Login Node":"Both tr-ubuntu3 and derek3-ubuntu2 are SLURM login nodes. You can connect to them by running either\nssh tr-ubuntu3\nssh derek3-ubuntu2","start-a-slurm-dev-node#Start a SLURM Dev Node":"Run the helper script to startup a SLURM Dev Node. Follow all the prompts carefully.\ncd wato_asd_tooling\nbash slurm_templates/small_dev_node.sh\nWe also have other dev node configurations (including a custom configurator) inside the tooling repo.\nbash slurm_templates/medium_dev_node.sh\nbash slurm_templates/large_dev_node.sh\nbash slurm_templates/custom_dev_node.sh\nDO NOT START MORE THAN ONE DEV NODE. You have a chance of corrupting your docker filesystem. Starting more than one dev node is like building multiple computers. It is NOT the same as creating multiple terminals.","local-machine-setup-ssh-for-slurm#[Local Machine] Setup SSH for SLURM":"Run this last helper script LOCALLY. Follow the prompts carefully.\ncd wato_asd_tooling\nbash ssh_helpers/setup_slurm_ssh.sh\nAnd you're good to go! Whenever you want to startup a SLURM Dev Node, start one up by running any of the SLURM Dev templates, and then SSH into the SLURM node through VScode."}}}